{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cliffy","text":""},{"location":"#cliffy","title":"Cliffy","text":"<p>Build feature-rich Python CLIs  quickly.</p> <p>Simplest example</p> <ol> <li> <p>Define a manifest <pre><code># hello.yaml\nname: hello\nversion: 0.1.0\nhelp: Hello world!\n\ncommands:\n  shell: $echo \"hello from shell\"\n  python: print(\"hello from python\")\n</code></pre></p> </li> <li> <p>Load CLI <pre><code>$ cli load hello.yaml\n</code></pre> <code>hello.yaml</code> automatically gets parsed to generate a Typer CLI and gets loaded into the running Python environment.</p> </li> <li> <p>Run CLI directly</p> </li> </ol> <p></p> <p>For more examples, check examples directory.</p> <p>Build into single-file executable</p> <p>Simple todo CLI with sqlite3 + tabulate.</p> <pre><code># todo.yaml\nname: todo\nversion: 1.0.0\nrequires:\n   - tabulate  # For pretty table output\n   - rich      # For colored terminal output\nimports: |\n  import sqlite3\n  from pathlib import Path\n  from tabulate import tabulate\n  from rich import print\n\ncommands:\n  create:\n    help: Create a new database with tasks table\n    params:\n    - name: str = typer.Option(..., prompt=True, confirmation_prompt=True)\n    run: |\n    db_path = Path(f\"{name}.db\")\n    conn = sqlite3.connect(db_path)\n    conn.execute(\"CREATE TABLE tasks (id INTEGER PRIMARY KEY, task TEXT NOT NULL, done BOOLEAN NOT NULL)\")\n\n    # insert example tasks\n    conn.execute(\"INSERT INTO tasks (task, done) VALUES ('Fight for your right!', 0)\")\n    conn.execute(\"INSERT INTO tasks (task, done) VALUES ('To party!', 1)\")\n    conn.commit()\n    conn.close()\n    print(f\"\u2728 Created database {db_path} with tasks table\")\n\n  tasks:\n    help: List tasks in database\n    params: [name: str!]\n    run: |\n    conn = sqlite3.connect(f\"{name}.db\")\n    cursor = conn.execute(\"SELECT * FROM tasks\")\n    tasks = cursor.fetchall()\n    conn.close()\n    print(tabulate(tasks, headers=['ID', 'Task', 'Done'], tablefmt='grid'))\n\n  add:\n    help: Add a new task\n    params: [name: str!, task: str!]\n    run: |\n    conn = sqlite3.connect(f\"{name}.db\")\n    conn.execute(\"INSERT INTO tasks (task, done) VALUES (?, 0)\", (task,))\n    conn.commit()\n    conn.close()\n    print(f\"\ud83d\udcdd Added task: {task}\")\n\n  complete:\n    help: Mark a task as complete\n    params: [name: str!, id: int!]\n    run: |\n    conn = sqlite3.connect(f\"{name}.db\")\n    conn.execute(\"UPDATE tasks SET done = 1 WHERE id = ?\", (id,))\n    conn.commit()\n    conn.close()\n    print(f\"\ud83c\udf89 Marked task {id} as complete\")\n</code></pre> <p></p> <p>For more examples, check examples directory.</p>"},{"location":"#why-cliffy","title":"Why cliffy","text":"<ul> <li>Mix Python and shell commands naturally</li> <li>Hot-reload changes as you develop</li> <li>Package your CLI as a single executable with <code>cli build</code></li> <li>Test your CLIs with built-in test runner</li> <li>Use Jinja2 template syntax for dynamic command generation</li> <li>Reusable command templates</li> <li>LLM-friendly schema- see custom prompt</li> </ul> <p>Similar frameworks</p> <ul> <li>Bashly - An awesome YAML to Bash CLI builder</li> <li>Fire - Python objects to CLI builder</li> </ul>"},{"location":"features/","title":"Cliffy Features","text":"<p>Cliffy provides a wide range of features to help you build powerful and flexible command-line interfaces. This guide will explore some of the key features with examples.</p> <p>Note</p> <p>Refer to Typer docs for docs on crafting custom paramater types.</p>"},{"location":"features/#dependencies","title":"Dependencies","text":"<p>You can specify Python package dependencies for the CLI using the <code>requires</code> section. For example:</p> <pre><code>requires:\n  - tabulate&gt;=0.9.0\n</code></pre> <p>This ensures that the <code>tabulate</code> package is installed when the CLI is used. Built CLIs will automatically bundle these specified dependencies with the CLI zipapp, making it super easy to distribute CLIs.</p>"},{"location":"features/#imports","title":"Imports","text":"<p>The <code>imports</code> section allows you to import Python modules. For example:</p> <pre><code>imports: |\n  import json\n  from datetime import datetime\n  from tabulate import tabulate\n</code></pre> <p>These modules can then be used in any of your command or function definitions.</p>"},{"location":"features/#variables","title":"Variables","text":"<p>You can define variables in the <code>vars</code> section and use them throughout your manifest. For example:</p> <pre><code>vars:\n  data_file: \"tasks.json\"\n</code></pre> <p>Then, you can reference this variable using <code>{{data_file}}</code> in other parts of the manifest for dynamic injection on CLI load.</p>"},{"location":"features/#functions","title":"Functions","text":"<p>The <code>functions</code> section allows you to define helper functions that can be used in your commands. For example:</p> <pre><code>functions:\n  - |\n    def load_data():\n        try:\n            with open(\"{{data_file}}\", \"r\") as f:\n                return json.load(f)\n        except FileNotFoundError:\n            return {\"projects\": [], \"tasks\": []}\n</code></pre> <p>These functions can be used to encapsulate reusable logic.</p>"},{"location":"features/#types","title":"Types","text":"<p>You can define custom types in the <code>types</code> section and use them in your command arguments and options. For example:</p> <pre><code>types:\n  ProjectName: str = typer.Argument(..., help=\"Name of the project\")\n  TaskName: str = typer.Argument(..., help=\"Name of the task\")\n  DueDate: str = typer.Option(None, \"--due\", \"-d\", help=\"Due date (YYYY-MM-DD)\")\n  Priority: int = typer.Option(1, \"--priority\", \"-p\", help=\"Priority (1-5)\", min=1, max=5)\n</code></pre> <p>This allows you to define type annotations and help messages for your arguments and options.</p>"},{"location":"features/#commands","title":"Commands","text":"<p>The <code>commands</code> section defines the different commands that your CLI supports. For example:</p> <pre><code>commands:\n  project.add:\n    params: [name: ProjectName]\n    run: |\n      data = load_data()\n      if name not in data[\"projects\"]:\n          data[\"projects\"].append(name)\n          save_data(data)\n          print(f\"Project '{name}' added successfully.\")\n      else:\n          print(f\"Project '{name}' already exists.\")\n</code></pre> <p>This defines a nested <code>project add</code> command that takes a <code>ProjectName</code> argument.</p>"},{"location":"features/#shell-commands","title":"Shell Commands","text":"<p>You can execute shell commands using the <code>$</code> prefix in the <code>run</code> section. For example:</p> <pre><code>backup:\n  help: Create a backup of the task data\n  run: |\n    $ cp {{data_file}} {{data_file}}.backup\n    $ echo \"Backup created: {{data_file}}.backup\"\n</code></pre> <p>This allows you to integrate shell commands into your CLI. Internally, shell commands will get translated into python subprocess calls. You can always verify the generated CLI code using <code>cli render</code>.</p> <p>In special cases, you may want to trigger the unsafe <code>shell=True</code> in the subprocess calls. For those times, you can use the <code>&gt;</code> prefix instead. Beware!</p>"},{"location":"features/#global-params","title":"Global params","text":"<p>Define <code>global_params</code> to add common arguments/options across ALL commands.</p> <pre><code>global_params:\n  - name: \"--verbose\"\n    type: \"bool\"\n    default: false\n    help: \"Enable verbose output\"\n\ncommands:\n  hello:\n    run: |\n      if verbose:\n        print(\"Verbose mode enabled\")\n      print(\"Hello!\")\n  goodbye:\n    run: |\n      if verbose:\n        print(\"Verbose mode enabled\")\n      print(\"Goodbye!\")\n</code></pre> <p>When either command is executed with <code>--verbose</code>, the corresponding <code>if verbose:</code> block within the run script will be executed.</p> <p>Note how the verbose variable is available directly within the command's script. No special handling is needed. It's treated like a normal parameter.</p>"},{"location":"features/#command-templates","title":"Command Templates","text":"<p>You can define reusable command templates in the <code>command_templates</code> section. For example:</p> <pre><code>command_templates:\n  with_confirmation:\n    params:\n      - \"yes\": bool = typer.Option(False, \"--yes\", \"-y\", help=\"Skip confirmation prompt\")\n    pre_run: |\n      if not yes:\n        typer.confirm(\"Are you sure you want to proceed?\", abort=True)\n</code></pre> <p>Then, you can use this template in your commands:</p> <pre><code>commands:\n  delete|rm:\n    help: Delete a file\n    template: with_confirmation\n    params: [filename: Filename]\n    run: |\n      if verbose:\n        print(f\"Deleting {{filename}}\")\n      os.remove(filename)\n      print(\"File deleted successfully\")\n</code></pre> <p>This allows you to reuse common argument definitions and pre/post run logic across multiple commands.</p> <p>Note</p> <p>Command script execution is performed in the following order:</p> <ol> <li>Template pre-run</li> <li>Command pre-run</li> <li>Command run</li> <li>Command post-run</li> <li>Template post-run</li> </ol>"},{"location":"features/#tests","title":"Tests","text":"<p>The <code>tests</code> section allows you to define test cases for your commands. For example:</p> <pre><code>tests:\n  - project add test1: assert result.exit_code == 0\n  - project list: assert \"test1\" in result.output\n</code></pre> <p>These tests can then be run with <code>cli test</code>. </p>"},{"location":"features/#hot-reload","title":"Hot-reload","text":"<p>Use the <code>cli dev</code> command to actively monitor a manifest for changes and automatically reload. Highly recommended for CLI manifest development.</p> <p>Example</p> <ul> <li><code>cli dev examples/hello.yaml</code></li> <li><code>cli dev examples/hello.yaml --run-cli hello</code> (reload on change and run <code>hello</code> command)</li> </ul>"},{"location":"features/#ide-integration","title":"IDE Integration","text":""},{"location":"features/#schema-validation-and-autocomplete","title":"Schema validation and autocomplete","text":"<p>To get real-time feedback while developing your CLI, install the YAML extension and setup by either:</p> <p>a. Generating manifest with local json-schema: <code>cli init --json-schema</code> b. Referencing the latest remote json-schema in your manifest:</p> <pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/jaykv/cliffy/refs/heads/main/examples/cliffy_schema.json\n</code></pre>"},{"location":"features/#embedded-syntax-highlighting","title":"Embedded syntax highlighting","text":"<p>Install the YAML embedded languages extension for proper syntax-highlighting for command run scripts.</p>"},{"location":"features/#llm-friendly-prompt","title":"LLM-friendly Prompt","text":"<p>Use this prompt as a system prompt to generate custom Cliffy manifests with your choice of LLM. </p> <p>The output will be the CLI manifest which can then be loaded into cliffy with <code>cli load</code> or built into a single-file executable with <code>cli build</code>.</p> <pre><code>You are a YAML manifest generator. Your task is to generate a single YAML manifest using the given json-schema. The json-schema defines the structure of a YAML manifest that gets translated to a Typer CLI. Typer is the CLI framework in Python. Use Typer features and imports as needed to craft the best CLI for the following listed CLI requirements. Generate the YAML manifest only for the requested CLI.\n\ncli_schema.json:\n```json\n{\"$defs\":{\"Command\":{\"description\":\"Defines a single command within the CLI. It specifies the command's execution logic,\\nparameters, and configuration.\",\"properties\":{\"run\":{\"anyOf\":[{\"$ref\":\"#/$defs/RunBlock\"},{\"$ref\":\"#/$defs/RunBlockList\"}],\"default\":\"\",\"title\":\"Run\"},\"help\":{\"default\":\"\",\"description\":\"A description of the command, displayed in the help output.\",\"title\":\"Help\",\"type\":\"string\"},\"params\":{\"default\":[],\"description\":\"A list of parameters for the command.\\nThere are three ways to define a param: \\n(generic) 1. A string as param definition. Gets appended to the command params signature.\\n(implicit) 2. A mapping with the param name as the key and the type as the value. Custom types are accepted here. Same as the implicit v1 params syntax. \\n(explicit) 3. A mapping with the following keys: `name` (required), `type` (required), `default` (None by default), `help` (Optional), `short` (Optional), `required` (False by default).\",\"items\":{\"anyOf\":[{\"$ref\":\"#/$defs/CommandParam\"},{\"$ref\":\"#/$defs/SimpleCommandParam\"},{\"$ref\":\"#/$defs/GenericCommandParam\"}]},\"title\":\"Params\",\"type\":\"array\"},\"template\":{\"default\":\"\",\"description\":\"A reference to a command template defined in the `command_templates` section of the manifest. This allows for reusable command definitions.\",\"title\":\"Template\",\"type\":\"string\"},\"pre_run\":{\"$ref\":\"#/$defs/PreRunBlock\",\"default\":\"\",\"description\":\"Script to run before the command's run block. This can be used for setup tasks or preconditions.\"},\"post_run\":{\"$ref\":\"#/$defs/PostRunBlock\",\"default\":\"\",\"description\":\"Script to run after the command's run block. This can be used for cleanup tasks or post-processing.\"},\"aliases\":{\"default\":[],\"description\":\"A list of aliases for the command. These aliases can be used to invoke the command with a different name.\",\"items\":{\"type\":\"string\"},\"title\":\"Aliases\",\"type\":\"array\"},\"name\":{\"default\":\"\",\"description\":\"The name of the command. This is generally derived from the key in the `commands` section of the manifest, but can be explicitly set here.\",\"title\":\"Name\",\"type\":\"string\"},\"config\":{\"anyOf\":[{\"$ref\":\"#/$defs/CommandConfig\"},{\"type\":\"null\"}],\"default\":null,\"description\":\"An optional `CommandConfig` object that provides additional configuration options for the command, such as context settings, help text customization, and visibility.\"}},\"title\":\"Command\",\"type\":\"object\"},\"CommandConfig\":{\"description\":\"Configuration options for a Cliffy command.\",\"properties\":{\"context_settings\":{\"default\":{},\"description\":\"Arbitrary settings passed to Click's context. Useful for things\\n        like overriding the default `max_content_width`.\\n        See Click's documentation for more details:\\n        https://click.palletsprojects.com/en/8.1.x/advanced/#context-settings\",\"title\":\"Context Settings\",\"type\":\"object\"},\"epilog\":{\"default\":\"\",\"description\":\"Text displayed after the help message.\",\"title\":\"Epilog\",\"type\":\"string\"},\"short_help\":{\"default\":\"\",\"description\":\"Short one-line help message displayed in help overviews.\",\"title\":\"Short Help\",\"type\":\"string\"},\"options_metavar\":{\"default\":\"[OPTIONS]\",\"description\":\"Placeholder text displayed for options in help messages.\",\"title\":\"Options Metavar\",\"type\":\"string\"},\"add_help_option\":{\"default\":true,\"description\":\"Whether to add the `--help` option automatically.\",\"title\":\"Add Help Option\",\"type\":\"boolean\"},\"no_args_is_help\":{\"default\":false,\"description\":\"If True, invoking the command without any arguments displays the help message.\",\"title\":\"No Args Is Help\",\"type\":\"boolean\"},\"hidden\":{\"default\":false,\"description\":\"If True, the command is hidden from help messages and command lists.\",\"title\":\"Hidden\",\"type\":\"boolean\"},\"deprecated\":{\"default\":false,\"description\":\"If True, the command is marked as deprecated in help messages.\",\"title\":\"Deprecated\",\"type\":\"boolean\"},\"rich_help_panel\":{\"default\":\"\",\"description\":\"Name of a Rich help panel to display after the default help. This is useful for\\n        displaying more complex help information, such as tables or formatted text.\\n        The content of the panel is defined using the `@rich_help` decorator.\",\"title\":\"Rich Help Panel\",\"type\":\"string\"}},\"title\":\"CommandConfig\",\"type\":\"object\"},\"CommandParam\":{\"description\":\"Defines the structure of a command parameter. It is used\\nwithin the `params` field of a `Command` object.\\n\\nBy default, parameters are treated as positional arguments. To specify an option, prefix the name with `--` to indicate flag.\",\"properties\":{\"name\":{\"description\":\"Parameter name. Prefix with `--` to indicate an option.\",\"title\":\"Name\",\"type\":\"string\"},\"type\":{\"description\":\"Parameter type (e.g., 'str', 'int', 'bool', or a custom type defined in the manifest's 'types' section).\",\"title\":\"Type\",\"type\":\"string\"},\"default\":{\"default\":null,\"description\":\"Default parameter value.\",\"title\":\"Default\"},\"help\":{\"default\":\"\",\"description\":\"Parameter description.\",\"title\":\"Help\",\"type\":\"string\"},\"short\":{\"default\":\"\",\"description\":\"Short option alias. i.e. '-v' for verbose.\",\"title\":\"Short\",\"type\":\"string\"},\"required\":{\"default\":false,\"description\":\"Whether the parameter is required.\",\"title\":\"Required\",\"type\":\"boolean\"}},\"required\":[\"name\",\"type\"],\"title\":\"CommandParam\",\"type\":\"object\"},\"CommandTemplate\":{\"description\":\"Defines a reusable template for command definitions.  Templates allow you to define\\ncommon parameters, pre-run/post-run scripts, and configuration options that can be\\napplied to multiple commands.\",\"properties\":{\"params\":{\"default\":[],\"description\":\"A list of parameters for the command template.  These parameters will be applied to any command that uses this template.\",\"items\":{\"anyOf\":[{\"$ref\":\"#/$defs/CommandParam\"},{\"$ref\":\"#/$defs/SimpleCommandParam\"},{\"$ref\":\"#/$defs/GenericCommandParam\"}]},\"title\":\"Params\",\"type\":\"array\"},\"pre_run\":{\"$ref\":\"#/$defs/PreRunBlock\",\"default\":\"\",\"description\":\"Script to run before the command's run and pre-run block. This script will be applied to any command that uses this template.\"},\"post_run\":{\"$ref\":\"#/$defs/PostRunBlock\",\"default\":\"\",\"description\":\"Script to run after the command's run and post-run block. This script will be applied to any command that uses this template.\"},\"config\":{\"anyOf\":[{\"$ref\":\"#/$defs/CommandConfig\"},{\"type\":\"null\"}],\"default\":null,\"description\":\"Additional configuration options for commands using this template. This allows customization of help text, context settings, and other Typer command parameters.\"}},\"title\":\"CommandTemplate\",\"type\":\"object\"},\"GenericCommandParam\":{\"title\":\"Generic Command Param\\nGets appended to the command params signature.\",\"type\":\"string\"},\"PostRunBlock\":{\"title\":\"Post-run Block\",\"type\":\"string\"},\"PreRunBlock\":{\"title\":\"Pre-run Block\",\"type\":\"string\"},\"RunBlock\":{\"description\":\"Command execution logic. Lines prefixed with '$' are treated as shell commands.\",\"title\":\"Command Run Block\",\"type\":\"string\"},\"RunBlockList\":{\"items\":{\"$ref\":\"#/$defs/RunBlock\"},\"title\":\"Run Block List\\nList of Run Blocks executed in order.\",\"type\":\"array\"},\"SimpleCommandParam\":{\"additionalProperties\":{\"type\":\"string\"},\"maxProperties\":1,\"minProperties\":1,\"title\":\"Simple Command Param\\nBuild params with key as the param name and value as the type and default vals, i.e. `verbose: bool = typer.Option(...)`\",\"type\":\"object\"}},\"additionalProperties\":true,\"properties\":{\"manifestVersion\":{\"default\":\"v3\",\"title\":\"Manifestversion\",\"type\":\"string\"},\"name\":{\"description\":\"The name of the CLI, used when invoking from command line.\",\"title\":\"Name\",\"type\":\"string\"},\"version\":{\"description\":\"CLI version\",\"title\":\"Version\",\"type\":\"string\"},\"help\":{\"default\":\"\",\"description\":\"Brief description of the CLI\",\"title\":\"Help\",\"type\":\"string\"},\"requires\":{\"default\":[],\"description\":\"List of Python package dependencies for the CLI.Supports requirements specifier syntax.\",\"items\":{\"type\":\"string\"},\"title\":\"Requires\",\"type\":\"array\"},\"includes\":{\"default\":[],\"description\":\"List of external CLI manifests to include.Performs a deep merge of manifests sequentially in the order given to assemble a merged manifest. and finally, deep merges the merged manifest with this manifest.\",\"items\":{\"type\":\"string\"},\"title\":\"Includes\",\"type\":\"array\"},\"vars\":{\"additionalProperties\":{\"anyOf\":[{\"type\":\"string\"},{\"additionalProperties\":{\"type\":\"null\"},\"type\":\"object\"}]},\"description\":\"Mapping defining manifest variables that can be referenced in any other blocks. Environments variables can be used in this section with ${some_env_var} for dynamic parsing. Supports jinja2 formatted expressions as values. Interpolate defined vars in other blocks jinja2-styled {{ var_name }}.\",\"title\":\"Vars\",\"type\":\"object\"},\"imports\":{\"anyOf\":[{\"type\":\"string\"},{\"items\":{\"type\":\"string\"},\"type\":\"array\"}],\"default\":[],\"description\":\"String block or list of strings containing any module imports. These can be used to import any python modules that the CLI depends on.\",\"title\":\"Imports\"},\"functions\":{\"anyOf\":[{\"type\":\"string\"},{\"items\":{\"type\":\"string\"},\"type\":\"array\"}],\"default\":[],\"description\":\"String block or list of helper function definitions. These functions should be defined as strings that can be executed by the Python interpreter.\",\"title\":\"Functions\"},\"types\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"A mapping containing any shared type definitions. These types can be referenced by name in the params section to provide type annotations for args and options defined in the params section.\",\"title\":\"Types\",\"type\":\"object\"},\"global_params\":{\"default\":[],\"description\":\"Parameters applied to all commands\",\"items\":{\"anyOf\":[{\"$ref\":\"#/$defs/CommandParam\"},{\"$ref\":\"#/$defs/SimpleCommandParam\"},{\"$ref\":\"#/$defs/GenericCommandParam\"}]},\"title\":\"Global Params\",\"type\":\"array\"},\"command_templates\":{\"additionalProperties\":{\"$ref\":\"#/$defs/CommandTemplate\"},\"description\":\"Reusable command templates\",\"title\":\"Command Templates\",\"type\":\"object\"},\"commands\":{\"additionalProperties\":{\"anyOf\":[{\"$ref\":\"#/$defs/Command\"},{\"$ref\":\"#/$defs/RunBlock\"},{\"$ref\":\"#/$defs/RunBlockList\"}]},\"description\":\"A mapping containing the command definitions for the CLI. Each command should have a unique key- which can be either a group command or nested subcommands. Nested subcommands are joined by '.' in between each level. Aliases for commands can be separated in the key by '|'. A special '(*)' wildcard can be used to spread the subcommand to all group-level commands\",\"title\":\"Commands\",\"type\":\"object\"},\"cli_options\":{\"description\":\"Additional CLI configuration options\",\"title\":\"Cli Options\",\"type\":\"object\"},\"tests\":{\"default\":[],\"description\":\"Test cases for commands\",\"items\":{\"anyOf\":[{\"type\":\"string\"},{\"additionalProperties\":{\"type\":\"string\"},\"type\":\"object\"}]},\"title\":\"Tests\",\"type\":\"array\"}},\"required\":[\"name\",\"version\",\"commands\"],\"title\":\"CLIManifest\",\"type\":\"object\"}\n\\`\\`\\`\n\nDue to a feature limitation, parent command cannot be triggered if they have subcommands. Do not write a group command definition for the parent if it has a subcommand.\n</code></pre>"},{"location":"getting-started/","title":"Getting Started with Cliffy","text":"<p>This guide will walk you through the basics of setting up and using Cliffy to create your own CLI tools.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>To get started with Cliffy, you'll need to install it using pip:</p> <pre><code>$ pip install cliffy\n$ cli --help\n$ cli init mycli\n$ cli load mycli.yaml\n$ mycli -h\n</code></pre> <p>You can also use uv to run cliffy directly with: <pre><code>$ uvx cliffy --help\n$ uvx cliffy init mycli\n$ uvx cliffy load mycli.yaml\n$ uvx --from cliffy mycli -h\n</code></pre></p>"},{"location":"getting-started/#creating-your-first-cli","title":"Creating Your First CLI","text":"<p>Let's create a simple \"hello\" CLI with <code>$ cli init hello --raw</code>.</p> <p>You should now have a hello.yaml file. Open it and replace the manifest with:</p> <pre><code>name: hello\nversion: 0.1.0\nhelp: A simple CLI that greets the user.\n\ncommands:\n  hello:\n    help: Greet the user\n    params:\n      - name: str = typer.Option(\"World\", \"--name\", \"-n\", help=\"Name to greet\")\n    run: |\n      print(f\"Hello, {name}!\")\n</code></pre> <p>This manifest defines a CLI named <code>hello</code> with a single command <code>hello</code> that takes an optional <code>--name</code> argument.</p>"},{"location":"getting-started/#running-your-cli","title":"Running Your CLI","text":"<p>To run your CLI, use the <code>cli run</code> command followed by the path to your manifest file:</p> <pre><code>$ cli run hello.yaml -- hello --name \"Your Name\"\n</code></pre> <p>This will output:</p> <pre><code>Hello, Your Name!\n</code></pre>"},{"location":"getting-started/#loading-clis","title":"Loading CLIs","text":"<p>You can load the CLI using the <code>cli load</code> command to avoid needing to prefix <code>cli run hello.yaml</code> for each trigger:</p> <pre><code>$ cli load hello.yaml\n</code></pre> <p>This command loads the generated CLI into the current Python environment. You can then run the CLI directly from the terminal by its name:</p> <pre><code>$ hello -h\n</code></pre>"},{"location":"getting-started/#building-clis","title":"Building CLIs","text":"<p>To build a CLI into a portable zipapp, you can run the <code>cli build</code> command:</p> <pre><code>$ cli build hello.yaml -o dist\n</code></pre> <p>This command builds a portable zipapp containing the CLI and its package requirements, outputting it to the <code>dist</code> directory. You can then run the built CLI:</p> <pre><code>$ ./dist/hello -h\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>This is just a basic example. Cliffy supports many more features, such as:</p> <ul> <li>Defining types for arguments and options.</li> <li>Using variables and functions in your manifest.</li> <li>Creating complex command structures.</li> <li>Running shell commands.</li> <li>Testing your CLI.</li> </ul> <p>Explore the Features section to learn more about these capabilities.</p>"},{"location":"schema/","title":"CLI Manifest Schema","text":"<p>This document describes the schema for the CLI manifest.</p>"},{"location":"schema/#climanifest","title":"CLIManifest","text":"<p>The <code>CLIManifest</code> model defines the structure of a CLI manifest file. It includes fields for the CLI's name, version, dependencies, commands, and other configuration options.</p>"},{"location":"schema/#fields","title":"Fields","text":"<ul> <li><code>manifestVersion</code>: The version of the manifest schema.</li> <li><code>name</code>: The name of the CLI, used when invoking from the command line.</li> <li><code>version</code>: The CLI version.</li> <li><code>help</code>: A brief description of the CLI.</li> <li><code>requires</code>: A list of Python package dependencies for the CLI. Supports requirements specifier syntax.</li> <li><code>includes</code>: A list of external CLI manifests to include. Performs a deep merge of manifests sequentially in the order given to assemble a merged manifest, and finally, deep merges the merged manifest with this manifest.</li> <li><code>vars</code>: A mapping defining manifest variables that can be referenced in any other blocks. Environments variables can be used in this section with <code>${some_env_var}</code> for dynamic parsing. Supports jinja2 formatted expressions as values. Interpolate defined vars in other blocks jinja2-styled <code>{{ var_name }}</code>.</li> <li><code>imports</code>: A string block or list of strings containing any module imports. These can be used to import any python modules that the CLI depends on.</li> <li><code>functions</code>: A string block or list of helper function definitions. These functions should be defined as strings that can be executed by the Python interpreter.</li> <li><code>types</code>: A mapping containing any shared type definitions. These types can be referenced by name in the args section to provide type annotations for params and options defined in the args section.</li> <li><code>global_params</code>: Parameters applied to all commands.</li> <li><code>command_templates</code>: Reusable command templates.</li> <li><code>commands</code>: A mapping containing the command definitions for the CLI. Each command should have a unique key- which can be either a group command or nested subcommands. Nested subcommands are joined by '.' in between each level. Aliases for commands can be separated in the key by '|'. A special '(*)' wildcard can be used to spread the subcommand to all group-level commands.</li> <li><code>cli_options</code>: Additional CLI configuration options.</li> <li><code>tests</code>: Test cases for commands.</li> </ul>"},{"location":"schema/#command","title":"Command","text":"<p>The <code>Command</code> model defines a single command within the CLI. It specifies the command's execution logic, arguments, and configuration.</p>"},{"location":"schema/#fields_1","title":"Fields","text":"<ul> <li><code>run</code>: The command's execution logic, defined as a <code>RunBlock</code>. Can be a single command or a list of commands.</li> <li><code>help</code>: A description of the command.</li> <li><code>args</code>: A list of arguments for the command. Each argument can be:<ul> <li>A <code>SimpleCommandParam</code>: <code>{'name': 'str = \"tester\"'}</code> structure</li> <li>A <code>CommandParam</code>: Full argument specification</li> <li>A string: Type annotation string</li> </ul> </li> <li><code>template</code>: A reference to a command template.</li> <li><code>pre_run</code>: A <code>PreRunBlock</code> to execute before the command.</li> <li><code>post_run</code>: A <code>PostRunBlock</code> to execute after the command.</li> <li><code>aliases</code>: A list of aliases for the command.</li> <li><code>name</code>: The name of the command.</li> <li><code>config</code>: An optional <code>CommandConfig</code> object.</li> </ul>"},{"location":"schema/#commandparam","title":"CommandParam","text":"<p>The <code>CommandParam</code> model defines the structure of a command parameter.</p>"},{"location":"schema/#fields_2","title":"Fields","text":"<ul> <li><code>name</code>: The name of the parameter. Options must be prefixed with <code>--</code>.</li> <li><code>type</code>: The type of the argument (e.g., <code>str</code>, <code>int</code>, <code>bool</code>).</li> <li><code>default</code>: The default value.</li> <li><code>help</code>: Description of the argument.</li> <li><code>short</code>: Short alias (only valid when name is prefixed with <code>--</code> as an option/flag).</li> <li><code>required</code>: Whether the argument is required.</li> </ul>"},{"location":"schema/#runblock-types","title":"RunBlock Types","text":"<p>Commands now use specialized blocks for execution:</p> <ul> <li><code>RunBlock</code>: Main command execution block</li> <li><code>PreRunBlock</code>: Pre-execution hook</li> <li><code>PostRunBlock</code>: Post-execution hook</li> <li><code>RunBlockList</code>: List of execution blocks</li> </ul> <p>Example</p> <pre><code>commands:\n    deploy:\n        pre_run: |\n            if not confirm_deployment():\n                raise typer.Abort()\n        run:\n        - print(\"Starting deployment...\")\n        - deploy_application()\n        post_run: |\n            notify_team(\"Deployment completed\")\n</code></pre>"},{"location":"schema/#commandconfig","title":"CommandConfig","text":"<p>The <code>CommandConfig</code> model provides additional configuration options for a command.</p>"},{"location":"schema/#fields_3","title":"Fields","text":"<p>These directly correlate with params accepted by Typer <code>@app.command()</code></p> <ul> <li><code>context_settings</code>: Additional context settings for the command.</li> <li><code>epilog</code>: Text to display after the help message.</li> <li><code>short_help</code>: A short description of the command.</li> <li><code>options_metavar</code>: The metavar to use for options in the help message.</li> <li><code>add_help_option</code>: Whether to add a help option to the command.</li> <li><code>no_args_is_help</code>: Whether to display the help message if no arguments are provided.</li> <li><code>hidden</code>: Whether to hide the command from the help message.</li> <li><code>deprecated</code>: Whether the command is deprecated.</li> <li><code>rich_help_panel</code>: An optional panel name for rich help output.</li> </ul> <p>For a deeper dive, check out the manifest.py.</p>"}]}